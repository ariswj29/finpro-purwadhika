// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  name        String   @unique
  description String?  @db.Text
  price       Float
  image       String?   @default("/product.jpg")
  currentStock Int?
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category          Category           @relation(fields: [categoryId], references: [id])
  productCarts      ProductCart[]
  orderProducts     OrderProduct[]
  productBranchs    ProductBranch[]
  mutations         Mutation[]
  wishlists         Wishlist[]

  @@map("products")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String?  @unique
  email      String   @unique
  password   String?
  isVerified Boolean  @default(false)
  role       Role     @default(USER)
  jwtToken   String?
  image      String?  @default("/profile.jpg")
  provider   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  branch    Branch?
  addresses Address[]
  carts     Cart[]
  wishlists Wishlist[]
  orders    Order[]

  @@map("users")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

model Address {
  id         Int      @id @default(autoincrement())
  name       String
  address    String   @db.Text
  provinceId Int
  cityId     Int
  postalCode String
  isPrimary  Boolean  @default(false)
  userId     Int
  latitude   Float
  longitude  Float
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  orders   Order[]
  province Province @relation(fields: [provinceId], references: [id])
  city     City     @relation(fields: [cityId], references: [id])

  @@map("addresses")
}

model Cart {
  id        Int      @id @default(autoincrement())
  isActive  Boolean  @default(true)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  productCarts ProductCart[]

  @@map("carts")
}

model ProductCart {
  id        Int      @id @default(autoincrement())
  quantity  Int
  productId Int
  cartId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_carts")
}

model Order {
  id                 Int                 @id @default(autoincrement())
  name               String
  paymentStatus      PaymentStatus
  shippingCost       Float
  total              Float
  paymentMethod      String
  paymentProof       String?
  expirePayment      DateTime
  branchId           Int
  userId             Int                 
  addressId          Int
  courier            String?
  shippedAt          DateTime?
  cancellationSource CancellationSource?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  address       Address        @relation(fields: [addressId], references: [id])
  branch        Branch         @relation(fields: [branchId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  orderProducts OrderProduct[]

  @@map("orders")
}

enum PaymentStatus {
  UNPAID
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum CancellationSource {
  USER
  SYSTEM
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  total     Float
  orderId   Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])

  @@map("order_products")
}

model Branch {
  id         Int      @id @default(autoincrement())
  name       String
  address    String   @db.Text
  provinceId Int
  cityId     Int
  postalCode String
  latitude   Float
  longitude  Float
  userId     Int?     @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user                User?              @relation(fields: [userId], references: [id])
  orders              Order[]
  productBranchs      ProductBranch[]
  sourceMutations     Mutation[]         @relation("SourceBranch")
  destinationutations Mutation[]         @relation("DestinationBranch")
  province            Province           @relation(fields: [provinceId], references: [id])
  city                City               @relation(fields: [cityId], references: [id])
  jurnalMutations     JournalMutation[]

  @@map("branchs")
}

model ProductBranch {
  id          Int      @id @default(autoincrement())
  stock       Int
  productId   Int
  branchId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deleted     Boolean  @default(false)

  branch           Branch         @relation(fields: [branchId], references: [id])
  product          Product           @relation(fields: [productId], references: [id])
  journalMutations JournalMutation[]

  @@unique([productId, branchId])
  @@map("product_branchs")
}

model Mutation {
  id                     Int            @id @default(autoincrement())
  stockRequest           Int
  stockProcess           Int?
  note                   String?        @db.Text
  sourceBranchId         Int
  destinationBranchId    Int
  productId              Int
  status                 MutationStatus
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  sourceBranch         Branch         @relation("SourceBranch", fields: [sourceBranchId], references: [id])
  destinationBranch    Branch         @relation("DestinationBranch", fields: [destinationBranchId], references: [id])
  journalMutation      JournalMutation[]
  product              Product           @relation(fields: [productId], references: [id])

  @@map("mutations")
}

model JournalMutation {
  id                 Int             @id @default(autoincrement())
  quantity           Int
  transactionType    TransactionType
  description        String          @db.Text
  productBranchId    Int
  branchId           Int?
  mutationId         Int?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  productBranch ProductBranch    @relation(fields: [productBranchId], references: [id])
  branch        Branch?          @relation(fields: [branchId], references: [id])
  mutation      Mutation?        @relation(fields: [mutationId], references: [id])

  @@map("journal_mutations")
}

enum TransactionType {
  IN
  OUT
}

enum MutationStatus {
  PENDING
  CANCELED
  APPROVED
  REJECTED
}

model Province {
  id   Int    @id
  name String

  cities     City[]
  branchs Branch[]
  addresses  Address[]

  @@map("provinces")
}

model City {
  id         Int    @id
  name       String
  provinceId Int

  branchs Branch[]
  province   Province    @relation(fields: [provinceId], references: [id])
  addresses  Address[]

  @@map("cities")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlists")
}

// sample
model Sample {
  id    Int     @id @default(autoincrement())
  name  String
  code  String
}